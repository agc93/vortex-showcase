<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vortex Showcase – Documentation</title><link>/docs/</link><description>Recent content in Documentation on Vortex Showcase</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Creating a Showcase</title><link>/docs/usage/showcase/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/usage/showcase/</guid><description>
&lt;p>There's two ways to create a showcase, depending on whether you want to use all of your enabled mods, or just some.&lt;/p>
&lt;p>To create a showcase with all of your currently enabled mods, use the Create Showcase button in the top toolbar of the Mods screen. This will walk you through creating a showcase with any mods you have currently installed and enabled.&lt;/p>
&lt;p>To create a showcase with only some selected mods, select all the mods you want to include from the Mods list (hold Ctrl key and click on each one) and use the &lt;em>Create Showcase&lt;/em> button in the &lt;strong>bottom&lt;/strong> action bar to create a showcase with just those mods.&lt;/p>
&lt;hr>
&lt;p>Once you've started your showcase, you'll be prompted for a name for your showcase (this can be anything you like) and what format you want your showcase in. Choose a format using the selections at the bottom of the dialog and click Create to start the showcase generation process. Once we've finished creating your showcase you'll see a notification appear and you can choose to copy the showcase to your clipboard or save it to a file on your PC.&lt;/p></description></item><item><title>Docs: Frequently Asked Questions</title><link>/docs/introduction/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/introduction/faq/</guid><description>
&lt;p>Below is a collection of frequent questions and the best answers I can give.&lt;/p>
&lt;h3 id="why-do-i-need-vortex-for-this">Why do I need Vortex for this?&lt;/h3>
&lt;p>You don't! This extension is specifically for people already using Vortex to manage your mods who want an easy way to share all or part of their mod setups. If you're currently using NMM/MO2/any other modding tool, this isn't for you!&lt;/p>
&lt;h3 id="doesnt-vortex-already-let-you-create-mod-reports">Doesn't Vortex already let you create mod reports?&lt;/h3>
&lt;p>Yes, and they're amazing! But they're a troubleshooting measure, first and foremost. Every mod creates its own report, and they're very technical: listing individual files, plugins and deployment details. Showcases don't have any of that detail, but are much more human-readable. Different tools for different purposes!&lt;/p>
&lt;h3 id="can-i-use-this-to-backuprestore-my-mods">Can I use this to backup/restore my mods?&lt;/h3>
&lt;p>No. Backup and restore of complex mod installations is a surprisingly hard problem, and it's not the problem that Showcase is trying to solve. As well as just being a very complicated thing to effectively backup, getting the level of detail required for reliable backup/restore requires a lot of game-specific logic that we just don't have here.&lt;/p>
&lt;p>You can, however, create a showcase and use that to rebuild your mods from scratch if you want. You might also be interested in &lt;a href="https://www.nexusmods.com/site/mods/67">this other community extension&lt;/a>.&lt;/p>
&lt;h3 id="why-doesnt-the-showcase-include-plugins">Why doesn't the showcase include plugins?&lt;/h3>
&lt;p>The main reason is that the concept of plugins is very game-specific! What most people refer to as Plugins is the result of another (bundled) Vortex &lt;a href="https://github.com/Nexus-Mods/extension-plugin-management">extension&lt;/a> that handles plugins for Gamebryo games. Showcase deliberately tries to avoid game-specific features as much as possible.&lt;/p>
&lt;p>The second reason is that Gamebryo plugins are &lt;em>complicated&lt;/em>. Take a look at the extension above and you'll find about 6000 lines of code dedicated to reading and managing plugins for Gamebryo games. I just don't have the capacity to add that level of complexity to this extension.&lt;/p>
&lt;h3 id="what-about-mods-that-arent-on-the-nexus">What about mods that aren't on the Nexus?&lt;/h3>
&lt;p>They will still be included in your showcase, but they might not have quite as much information. A lot of the information that Vortex knows about a mod comes from Nexus Mods (or another metaserver for some games), and this extension just pulls mod metadata from what Vortex already knows about your mods.&lt;/p></description></item><item><title>Docs: Installation</title><link>/docs/usage/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/usage/installation/</guid><description>
&lt;h2 id="installing-the-extension">Installing the Extension&lt;/h2>
&lt;p>To create showcases, you'll need to install the extension into Vortex first. There's a couple of different ways to do that, but unless you've got a pretty specific use case, you'll probably want one of the two automatic methods, but manual installation is available as well.&lt;/p>
&lt;h3 id="automatic-installation">Automatic Installation&lt;/h3>
&lt;blockquote>
&lt;p>This is the easiest way to install!&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>Open up Vortex, and open the Extensions panel from the left sidebar.&lt;/li>
&lt;li>Click &lt;strong>Find more&lt;/strong> to open the list of Extensions&lt;/li>
&lt;li>Find &lt;strong>Vortex Showcase&lt;/strong> and click &lt;em>Install&lt;/em>&lt;/li>
&lt;li>Wait for the extension to install and &lt;strong>restart Vortex&lt;/strong> when prompted.&lt;/li>
&lt;/ol>
&lt;p>Once Vortex has restarted, switch back to your Mods screen and you should be ready to &lt;a href="../docs/usage/showcase">create a showcase&lt;/a>!&lt;/p>
&lt;h3 id="semi-automatic-installation">Semi-Automatic Installation&lt;/h3>
&lt;p>If you can't install directly from the Extensions screen, you can instead install from the archive.&lt;/p>
&lt;ol>
&lt;li>Download the archive from &lt;a href="https://www.nexusmods.com/site/mods/133?tab=files">Nexus Mods&lt;/a> or &lt;a href="https://https://github.com/agc93/vortex-showcase/releases">GitHub&lt;/a>&lt;/li>
&lt;li>Open the Extensions panel in Vortex&lt;/li>
&lt;li>Click on the &lt;em>Drop File(s)&lt;/em> box in the corner and locate the archive you downloaded.&lt;/li>
&lt;li>Wait for the extension to install and &lt;strong>restart Vortex&lt;/strong> when prompted.&lt;/li>
&lt;/ol>
&lt;p>Once Vortex has restarted, switch back to your Mods screen and you should be ready to &lt;a href="../docs/usage/showcase">create a showcase&lt;/a>!&lt;/p>
&lt;h3 id="manual-installation">Manual Installation&lt;/h3>
&lt;blockquote>
&lt;p>Only attempt this if you &lt;em>absolutely&lt;/em> have to. It becomes much harder to debug and much harder to upgrade.&lt;/p>
&lt;/blockquote>
&lt;p>If you want to install the extension yourself, you will have to install the actual extension files manually. Make sure you close Vortex before proceeding.&lt;/p>
&lt;p>First, download the archive from &lt;a href="https://www.nexusmods.com/site/mods/133?tab=files">Nexus Mods&lt;/a> or &lt;a href="https://https://github.com/agc93/vortex-showcase/actions">GitHub&lt;/a>.&lt;/p>
&lt;p>Next, unpack the archive to somewhere convenient. You should have a directory named &lt;code>vortex-showcase&lt;/code> with a handful of files inside, including &lt;em>at least&lt;/em> the following:&lt;/p>
&lt;ul>
&lt;li>info.json&lt;/li>
&lt;li>index.js&lt;/li>
&lt;/ul>
&lt;p>Now, copy the whole directory to your Vortex folder. You can easily open your Vortex folder by opening a new File Explorer window and entering the following in to the location bar: &lt;code>%APPDATA%/Vortex&lt;/code> and then opening the &lt;code>plugins&lt;/code> directory (create it if it doesn’t exist).&lt;/p>
&lt;p>Once you’re done, you should have files at the following location:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">C:\Users\&amp;lt;your-user-name-here&amp;gt;\AppData\Roaming\Vortex\plugins\vortex-showcase\info.json
C:\Users\&amp;lt;your-user-name-here&amp;gt;\AppData\Roaming\Vortex\plugins\vortex-showcase\index.js
C:\Users\&amp;lt;your-user-name-here&amp;gt;\AppData\Roaming\Vortex\plugins\vortex-showcase\&amp;lt;some-other-files&amp;gt;...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>With those files in place, you're clear to start Vortex and you should see the actions in your Mods screen.&lt;/p></description></item><item><title>Docs: Docs Contributions</title><link>/docs/developer/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/docs/</guid><description>
&lt;p>Ironically, the documentation side of the project has slightly higher environment requirements than the project itself! We're using the Hugo static site generator with the Docsy template, so you will need to have a recent version of Hugo Extended installed, as well as &lt;code>npm&lt;/code> to restore the required tools.&lt;/p>
&lt;p>Actual docs content is all stored in the &lt;code>content/&lt;/code> directory, organised under language. At this time only English (&lt;code>en&lt;/code>) is included, although translations are more than welcome!&lt;/p></description></item><item><title>Docs: Extensions API</title><link>/docs/developer/extensions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/extensions/</guid><description>
&lt;p>The one advantage to Vortex Showcase's hilariously excessive over-engineering is that it has ended up specifically designed to make adding new formats or actions very simple.&lt;/p>
&lt;h2 id="showcase-formats">Showcase Formats&lt;/h2>
&lt;p>In it's simplest form, a format is a function that takes a model (an &lt;code>ITemplateModel&lt;/code> to be specific) and returns a string with the text content of the showcase. The complicated integration work of pulling mods and their metadata out of Vortex, as well as filtering out some stuff, is done by Showcase itself before the format renderers are called. For example, the two default renderers take this model and use Mustache.js to render templates with that model and return the generated string content.&lt;/p>
&lt;p>All showcase formats are loaded directly from Vortex's session state using the extension API, even the default ones. The Markdown and BBCode renderers are not hard-coded anywhere, they're just registered as formats when the extension loads.&lt;/p>
&lt;h3 id="registering-formatsrenderers">Registering formats/renderers&lt;/h3>
&lt;p>Registering a new format requires two things: an implementation of &lt;code>IShowcaseRenderer&lt;/code> and dispatching a &lt;code>registerShowcaseRenderer&lt;/code> action. You can find this in the &lt;code>index.ts&lt;/code> for the default formats, where we register a &lt;code>MarkdownRenderer&lt;/code> as below:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">once&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">store&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dispatch&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">registerShowcaseRenderer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Markdown&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">MarkdownRenderer&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The string key (i.e. &lt;code>Markdown&lt;/code>) is what's shown to users so make sure it's reasonably friendly. The second parameter is a callback to return your renderer. If you need constructor params or any other weird setup, you should be safe-ish to do that here.&lt;/p>
&lt;h3 id="rendering-showcases">Rendering showcases&lt;/h3>
&lt;p>When a user creates a showcase, they are prompted with all the currently registered renderers and can choose one. Once they hit Create, the extension will pull the &lt;code>IShowcaseRenderer&lt;/code> with the matching key from session state and invoke it in two stages: model build and final rendering.&lt;/p>
&lt;p>First, to build the model metadata, the &lt;code>createModel&lt;/code> function for the current renderer is called for each mod. If you don't need to do any customisation or control how mod metadata is created, then just return &lt;code>null&lt;/code>, and the extension will populate sane defaults (using &lt;code>ModInfoDisplay.create&lt;/code>).&lt;/p>
&lt;p>Next, once the template model has been built, the extension will call the &lt;code>createShowcase&lt;/code> function passing in the generated model and the extension API (for convenience). This is where the actual rendering happens, and this function should return the &lt;strong>final&lt;/strong> string contents of the showcase, which the user can then copy/save&lt;/p>
&lt;h2 id="actions">Actions&lt;/h2>
&lt;p>There's the beginnings of an API to take certain actions after a showcase is generated, but this is not finalised so I have not included it here. This API is intended for things like uploading certain showcase formats, or letting users directly share a showcase through other means.&lt;/p></description></item></channel></rss>